{-# START_FILE .ghci #-}
:set -XCPP
:set -XGHC2021 -XLambdaCase -XMultiWayIf -XNPlusKPatterns -XOverloadedStrings -XLexicalNegation
:set -XDataKinds -XPolyKinds -XNoStarIsType -XTypeFamilyDependencies -XUndecidableInstances

{-# START_FILE .gitignore #-}
.stack-work/
dist-new/
{{name}}.cabal
*.log
.curname
core
*.hi
*.o
*~

{-# START_FILE ChangeLog.md #-}
# ChangeLog for {{name}}

## Unreleased changes

{-# START_FILE LICENSE #-}
Copyright {{copyright}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

{-# START_FILE README.md #-}
# {{name}}

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE activate #-}
chmod u+x building checking executing ghcing initializing resetting setting submitting

ghcup set hls 2.10.0.0
ghcup set stack 3.7.1
ghcup set cabal 3.16.0.0
ghcup set ghc 9.8.4

tee stack.yaml > /dev/null << 'EOF'
snapshot: lts-23.28

packages:
- .

extra-deps:
- ac-library-hs-1.5.3.0

EOF

stack build

{-# START_FILE app/Main.hs #-}
{-# LANGUAGE CPP #-}
{-# LANGUAGE GHC2021 #-}
{-# LANGUAGE ImportQualifiedPost #-}
{-# LANGUAGE LexicalNegation #-}
{-# LANGUAGE LambdaCase, MultiWayIf #-}
{-# LANGUAGE NPlusKPatterns #-}
{-# LANGUAGE DataKinds, PolyKinds, NoStarIsType, TypeFamilyDependencies, UndecidableInstances #-}
{-# LANGUAGE OverloadedStrings #-}
module Main where

import Data.ByteString.Char8 qualified as B
import Data.Maybe
import Data.Ord

import Control.Arrow
import Control.Applicative
import Control.Monad
import Data.Array
import Data.Bits
import Data.Bool
import Data.Char
import Data.Function
import Data.List
import Text.Printf

import Data.IntMap qualified as IM
import Data.IntSet qualified as IS
import Data.Map qualified as M
import Data.Set qualified as S
import Data.Tree qualified as T
import Data.Sequence qualified as Q
import Data.Vector qualified as V

import Debug.Trace qualified as Debug

debug :: Bool
debug = () /= ()

type I = Int
type O = Int

type Dom   = ()
type Codom = ()

type Solver = Dom -> Codom

solve :: Solver
solve = \ case
    () -> ()

decode :: [[I]] -> Dom
decode = \ case
    _:_ -> ()
    _   -> invalid $ "toDom: " ++ show @Int __LINE__

encode :: Codom -> [[O]]
encode = \ case
    _rr -> [[]]

main :: IO ()
main = B.interact (detokenize . encode . solve . decode . entokenize)

class AsToken a where
    readB :: B.ByteString -> a
    readBs :: B.ByteString -> [a]
    readBs = map readB . B.words
    entokenize :: B.ByteString -> [[a]]
    entokenize = map readBs . B.lines

    showB :: a -> B.ByteString
    showBs :: [a] -> B.ByteString
    showBs = B.unwords . map showB
    detokenize :: [[a]] -> B.ByteString
    detokenize = B.unlines . map showBs

instance AsToken B.ByteString where
    readB = id
    showB = id

instance AsToken Int where
    readB = readInt
    showB = showInt

instance AsToken Integer where
    readB = readInteger
    showB = showInteger

instance AsToken String where
    readB = readStr
    showB = showStr

instance AsToken Double where
    readB = readDbl
    showB = showDbl

instance AsToken Char where
    readB = B.head
    showB = B.singleton
    readBs = B.unpack
    showBs = B.pack

readInt :: B.ByteString -> Int
readInt = fst . fromJust . B.readInt

showInt :: Int -> B.ByteString
showInt = B.pack . show

readInteger :: B.ByteString -> Integer
readInteger = fst . fromJust . B.readInteger

showInteger :: Integer -> B.ByteString
showInteger = B.pack . show

readStr :: B.ByteString -> String
readStr = B.unpack

showStr :: String -> B.ByteString
showStr = B.pack

readDbl :: B.ByteString -> Double
readDbl = read . B.unpack

showDbl :: Double -> B.ByteString
showDbl = B.pack . show

{- debug -}
trace :: String -> a -> a
trace | debug     = Debug.trace
      | otherwise = const id

tracing :: Show a => a -> a
tracing = trace . show <*> id

{- error -}
impossible :: String -> a
impossible msg = error $ msg ++ ", impossible"

invalid :: String -> a
invalid msg = error $ msg ++ ", invalid input"

{- Bonsai -}

{-# START_FILE app/zzz/add-entry/Main.hs #-}
module Main where

import Data.Char
import Data.List
import System.Directory
import System.Environment
import System.FilePath
import System.IO

main :: IO ()
main = do
    { pr <- getProgName
    ; as <- getArgs
    ; pj <- takeBaseName <$> getCurrentDirectory
    ; case as of
        ex:_ -> proc pj ex
        _    -> usage pr
    }

proc :: FilePath -> FilePath -> IO ()
proc pj ex = do
    { let
        { normex   = toLower <$> ex
        ; execdir  = "app" </> normex
        ; from     = "app" </> "Main.hs"
        ; to       = execdir </> "Main.hs"
        }
    ; copyFile from to
    ; insEntry pj normex
    }

insEntry :: String -> String -> IO ()
insEntry pj ex = do
    { ls <- lines <$> readFile "package.yaml"
    ; case break ("executables:" `isPrefixOf`) ls of
        (xs,ys) -> do
            { writeFile "tmp.yaml" $ unlines $ xs ++ take 1 ys ++ entries pj ex ++ drop 1 ys
            ; renameFile "tmp.yaml" "package.yaml"
            }
    }

entries :: String -> String -> [String]
entries pj ex = 
    [ "  " ++ ex ++ ":"
    , "    main:               Main.hs"
    , "    source-dirs:        app/" ++ ex
    , "    ghc-options:"
    , "    - -rtsopts"
    , "    dependencies:"
    , "    - " ++ pj
    , ""
    ]

usage :: String -> IO ()
usage pr = hPutStrLn stderr msg
    where
        msg = "Usage: " ++ pr ++ " <entry-name>"

{-# START_FILE building #-}
#!/bin/bash

source .curname
stack build {{name}}:exe:$CURRENT_STACK_EXE_ENTRY

{-# START_FILE checking #-}
#!/bin/bash

source .curname

./building
oj t -c ./executing -d app/$CURRENT_STACK_EXE_ENTRY/tests

{-# START_FILE executing #-}
#!/bin/bash

source .curname
stack exec -- $CURRENT_STACK_EXE_ENTRY

{-# START_FILE ghcing #-}
#!/bin/bash

source .curname
stack exec -- ghci app/$CURRENT_STACK_EXE_ENTRY/Main.hs

{-# START_FILE initializing #-}
#!/bin/bash

cp app/Main.hs ~/.config/atcoder-cli-nodejs/haskell/

acc new {{name}}
mv {{name}}/contest.acc.json ./

jq -r '.tasks[].id' ./contest.acc.json | while read tid; do
  mv {{name}}/${tid: -1} app/
  ./setting ${tid: -1}
done

rmdir {{name}}
cp contest.acc.json app/
ln -s ./app ./{{name}}

./resetting a

{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0
github:              {{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}
license:             BSD3
author:              {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer:          {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright:           {{copyright}}{{^copyright}}{{year}}{{^year}}2025{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}

extra-source-files:
- README.md
- ChangeLog.md

description:         Please see the README on GitHub at <https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme>

dependencies:
- base >= 4.7 && < 5
- adjunctions
- array
- attoparsec
- bifunctors
- binary
- bitvec
- bytestring
- comonad
- containers
- contravariant
- deepseq
- directory
- distributive
- exceptions
- extra
- fgl
- filepath
- flow
- free
- ghc-bignum
- ghc-boot-th
- ghc-prim
- hashable
- heaps
- hmatrix
- hmatrix-gsl
- hmatrix-special
- indexed-traversable
- indexed-traversable-instances
- integer-gmp
- integer-logarithms
- kan-extensions
- lens
- linear-base
- list-t
- massiv
- megaparsec
- monad-memo
- mono-traversable
- mtl
- mutable-containers
- mwc-random
- parallel
- parsec
- parser-combinators
- pretty
- primitive
- process
- profunctors
- psqueues
- random
- reflection
- regex-tdfa
- safe-exceptions
- scientific
- semialign
- semigroupoids
- split
- stm
- strict
- strict-lens
- tagged
- template-haskell
- text
- tf-random
- these
- these-lens
- time
- transformers
- trifecta
- unboxing-vector
- unix
- unordered-containers
- utility-ht
- vector
- vector-algorithms
- vector-split
- vector-stream
- vector-th-unbox
- wide-word
- witherable
- xhtml

language: GHC2021

default-extensions:
- CPP
- ImportQualifiedPost
- LambdaCase
- LexicalNegation
- MultiWayIf
- NPlusKPatterns
- OverloadedStrings
- DataKinds
- PolyKinds
- NoStarIsType
- TypeFamilyDependencies
- UndecidableInstances

ghc-options:
- -Wall
- -Wno-unused-imports
- -Wno-x-partial

library:
    source-dirs: []

executables:
  add-entry:
    main:                Main.hs
    source-dirs:         app/zzz/add-entry
    dependencies:
    - {{name}}

  {{name}}:
    main:                Main.hs
    source-dirs:         app
    dependencies:
    - {{name}}

{-# START_FILE resetting #-}
#!/bin/bash

echo "export CURRENT_STACK_EXE_ENTRY=$1" > .curname

{-# START_FILE setting #-}
#!/bin/bash

stack exec -- add-entry $1

echo "export CURRENT_STACK_EXE_ENTRY=$1" > .curname

stack build {{name}}:exe:$1

if type "gen-hie" > /dev/null 2>&1; then
  gen-hie > hie.yaml
else
  stack install implicit-hie
  gen-hie > hie.yaml
fi

