{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.0.0
github:              {{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}
license:             BSD3
author:              {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer:          {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright:           {{copyright}}{{^copyright}}{{year}}{{^year}}2025{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}

extra-source-files:
- README.md
- ChangeLog.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            {{category}}{{^category}}Web{{/category}}

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme>

dependencies:
- base >= 4.7 && < 5
- utf8-string
- unicode-show
- hspec
- main-tester
- Cabal
- Cabal-syntax
- QuickCheck
- adjunctions
- array
- attoparsec
- bifunctors
- binary
- bitvec
- bytestring
- comonad
- containers
- contravariant
- deepseq
- directory
- distributive
- exceptions
- extra
- fgl
- filepath
- free
- ghc-bignum
- ghc-boot-th
- ghc-prim
- hashable
- heaps
- indexed-traversable
- indexed-traversable-instances
- integer-gmp
- integer-logarithms
- kan-extensions
- lens
- linear-base
- list-t
- massiv
- megaparsec
- mono-traversable
- mtl
- mutable-containers
- mwc-random
- parallel
- parsec
- parser-combinators
- pretty
- primitive
- process
- profunctors
- psqueues
- random
- reflection
- regex-tdfa
- safe-exceptions
- scientific
- semialign
- semigroupoids
- split
- stm
- strict
- strict-lens
- tagged
- template-haskell
- text
- tf-random
- these
- these-lens
- time
- transformers
- trifecta
- unboxing-vector
- unix
- unordered-containers
- utility-ht
- vector
- vector-algorithms
- vector-stream
- vector-th-unbox
- xhtml

language: GHC2021

default-extensions:
- CPP
- ImplicitParams
- ImportQualifiedPost
- LambdaCase
- LexicalNegation
- MultiWayIf
- NPlusKPatterns
- OverloadedStrings
- DataKinds
- PolyKinds
- NoStarIsType
- TypeFamilyDependencies
- UndecidableInstances

ghc-options:
- -Wall

library:
  source-dirs: src

executables:
  add-entry:
    main:                Main.hs
    source-dirs:         app/zzz/add-entry
    ghc-options:
    - -rtsopts
    dependencies:
    - {{name}}

  {{name}}:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
    - -rtsopts
    dependencies:
    - {{name}}

tests:
  {{name}}-test:
    main:                spec.hs
    source-dirs:         test
    dependencies:
    - {{name}}
    - hspec
    - main-tester

  {{name}}-doctest:
    main:                doctests.hs
    source-dirs:         test
    dependencies:
    - {{name}}
    - doctest

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE src/Lib.hs #-}
-- # Lib 雛形モジュール
-- このファイルは`stack new`コマンドで自動的に`src/`に挿入されます
-- 
-- ## 言語拡張と`module`宣言
-- 最低限の指定をしてある
{-# LANGUAGE CPP #-}
{-# LANGUAGE GHC2021 #-}
{-# LANGUAGE ImplicitParams #-}
{-# LANGUAGE ImportQualifiedPost #-}
{-# LANGUAGE LexicalNegation #-}
{-# LANGUAGE LambdaCase, MultiWayIf #-}
{-# LANGUAGE NPlusKPatterns #-}
{-# LANGUAGE DataKinds, PolyKinds, NoStarIsType, TypeFamilyDependencies #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE OverloadedRecordDot, NoFieldSelectors, DuplicateRecordFields #-}
module Lib
    ( someFunc
    ) where

-- ## `doctest`のための記述と定義本体
{- | 
「なんか関数」を標準出力に印字する
>>> someFunc
なんか関数
-}
someFunc :: IO ()
someFunc = putStrLn "なんか関数"

{-# START_FILE test/spec.hs #-}
{-# OPTIONS -F -pgmF hspec-discover #-}

{-# START_FILE test/LibSpec.hs #-}
{-# LANGUAGE GHC2021 #-}
{-# LANGUAGE ImplicitParams #-}
{-# LANGUAGE ImportQualifiedPost #-}
{-# LANGUAGE LexicalNegation #-}
{-# LANGUAGE LambdaCase, MultiWayIf #-}
{-# LANGUAGE NPlusKPatterns #-}
{-# LANGUAGE DataKinds, PolyKinds, NoStarIsType, TypeFamilyDependencies #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE OverloadedRecordDot, NoFieldSelectors, DuplicateRecordFields #-}
module LibSpec
  ( spec
  ) where

import Data.String
import qualified Codec.Binary.UTF8.String as U
import qualified Data.ByteString as B
import Test.Main
import Test.Hspec
import Text.Show.Unicode
import Lib

newtype UString a = UString a deriving Eq

ustring :: B.ByteString -> UString String
ustring = UString . U.decode . B.unpack

instance IsString a => IsString (UString a) where
  fromString = UString . fromString
  
instance Show a => Show (UString a) where
  show (UString s) = ushow s

spec :: Spec
spec = describe "someFunc" $ do
  { it "「なんか関数」を標準出力に印字する." $ do
    { result <- captureProcessResult Lib.someFunc
    ; prExitCode result `shouldBe` ExitSuccess
    ; prStderr result `shouldSatisfy` B.null
    ; ustring (prStdout result) `shouldBe` "なんか関数\n"
    }
  }

{-# START_FILE test/doctests.hs #-}
{-# LANGUAGE GHC2021 #-}
{-# LANGUAGE ImplicitParams #-}
{-# LANGUAGE ImportQualifiedPost #-}
{-# LANGUAGE LexicalNegation #-}
{-# LANGUAGE LambdaCase, MultiWayIf #-}
{-# LANGUAGE NPlusKPatterns #-}
{-# LANGUAGE DataKinds, PolyKinds, NoStarIsType, TypeFamilyDependencies #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE OverloadedRecordDot, NoFieldSelectors, DuplicateRecordFields #-}
module Main where

import Test.DocTest

main :: IO ()
main = doctest ["src/Lib.hs"]

{-# START_FILE README.md #-}
# {{name}}

{-# START_FILE ChangeLog.md #-}
# Changelog for {{name}}

## Unreleased changes

{-# START_FILE LICENSE #-}
Copyright {{copyright}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

{-# START_FILE .gitignore #-}
.stack-work/
dist-new/
{{name}}.cabal
*.log
.curname
core
*.hi
*.o
*~

{-# START_FILE .ghci #-}
import Data.Time
_prompt _ n = (utcToLocalTime <$> getCurrentTimeZone <*> getCurrentTime) >>= print >> return ">>> "
:set prompt-function _prompt
import Text.Show.Unicode
:set -interactive-print=uprint
:set -XGHC2021 -XLambdaCase -XMultiWayIf -XNPlusKPatterns -XOverloadedStrings -XLexicalNegation
:set -XDataKinds -XPolyKinds -XNoStarIsType -XTypeFamilyDependencies -XUndecidableInstances
:set -XImplicitParams -XNoFieldSelectors -XDuplicateRecordFields -XOverloadedRecordDot

{-# START_FILE app/zzz/add-entry/Main.hs #-}
module Main where

import Data.Char
import Data.List
import System.Directory
import System.Environment
import System.FilePath
import System.IO

main :: IO ()
main = do
    { pr <- getProgName
    ; as <- getArgs
    ; pj <- takeBaseName <$> getCurrentDirectory
    ; case as of
        ex:_ -> proc pj ex
        _    -> usage pr
    }

proc :: FilePath -> FilePath -> IO ()
proc pj ex = do
    { let
        { normex   = toLower <$> ex
        ; execdir  = "app" </> normex
        ; from     = "app" </> "Main.hs"
        ; to       = execdir </> "Main.hs"
        }
    ; copyFile from to
    ; insEntry pj normex
    }

insEntry :: String -> String -> IO ()
insEntry pj ex = do
    { ls <- lines <$> readFile "package.yaml"
    ; case break ("executables:" `isPrefixOf`) ls of
        (xs,ys) -> do
            { writeFile "tmp.yaml" $ unlines $ xs ++ take 1 ys ++ entries pj ex ++ drop 1 ys
            ; renameFile "tmp.yaml" "package.yaml"
            }
    }

entries :: String -> String -> [String]
entries pj ex = 
    [ "  " ++ ex ++ ":"
    , "    main:               Main.hs"
    , "    source-dirs:        app/" ++ ex
    , "    ghc-options:"
    , "    - -rtsopts"
    , "    dependencies:"
    , "    - " ++ pj
    , ""
    ]

usage :: String -> IO ()
usage pr = hPutStrLn stderr msg
    where
        msg = "Usage: " ++ pr ++ " <entry-name>"

{-# START_FILE activate #-}
chmod u+x building checking executing ghcing initializing resetting setting submitting

{-# START_FILE initializing #-}
#!/bin/bash

tee stack.yaml > /dev/null << 'EOF'
snapshot: lts-23.28

packages:
- .
EOF

if [ -e ~/.config/atcoder-cli-nodejs/haskell ] && [ ! -f ~/.config/atcoder-cli-nodejs/haskell/Main.hs ] ; then
    cp app/Main.hs ~/.config/atcoder-cli-nodejs/haskell/
fi

acc config default-task-choice all
acc config default-template haskell

acc new {{name}}
mv {{name}}/contest.acc.json ./

jq -r '.tasks[].id' ./contest.acc.json | while read tid; do
  mv {{name}}/${tid: -1} app/
  ./setting ${tid: -1}
done

rmdir {{name}}

./resetting a

{-# START_FILE setting #-}
#!/bin/bash

stack build {{name}}:exe:add-entry
stack exec -- add-entry $1

echo "export CURRENT_STACK_EXE_ENTRY=$1" > .curname

stack build {{name}}:exe:$1

if type "gen-hie" > /dev/null 2>&1; then
  gen-hie > hie.yaml
else
  stack install implicit-hie
  gen-hie > hie.yaml
fi

{-# START_FILE resetting #-}
#!/bin/bash

echo "export CURRENT_STACK_EXE_ENTRY=$1" > .curname

{-# START_FILE building #-}
#!/bin/bash

source .curname
stack build {{name}}:exe:$CURRENT_STACK_EXE_ENTRY

{-# START_FILE executing #-}
#!/bin/bash

source .curname
stack exec -- $CURRENT_STACK_EXE_ENTRY

{-# START_FILE ghcing #-}
#!/bin/bash

source .curname
stack exec -- ghci app/$CURRENT_STACK_EXE_ENTRY/Main.hs

{-# START_FILE checking #-}
#!/bin/bash

source .curname

./building
oj t -c ./executing -d app/$CURRENT_STACK_EXE_ENTRY/tests

{-# START_FILE submitting #-}
#!/bin/bash

source .curname

acc s -t {{name}}_$CURRENT_STACK_EXE_ENTRY app/$CURRENT_STACK_EXE_ENTRY/Main.hs

{-# START_FILE app/Main.hs #-}
{-# LANGUAGE CPP #-}
{-# LANGUAGE GHC2021 #-}
{-# LANGUAGE ImplicitParams #-}
{-# LANGUAGE ImportQualifiedPost #-}
{-# LANGUAGE LexicalNegation #-}
{-# LANGUAGE LambdaCase, MultiWayIf #-}
{-# LANGUAGE NPlusKPatterns #-}
{-# LANGUAGE DataKinds, PolyKinds, NoStarIsType, TypeFamilyDependencies #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE OverloadedRecordDot, NoFieldSelectors, DuplicateRecordFields #-}
module Main where

import Data.ByteString.Char8 qualified as B
import Data.Maybe
import Data.Ord

import Control.Arrow
import Control.Applicative
import Control.Monad
import Data.Array
import Data.Bits
import Data.Bool
import Data.Char
import Data.Function
import Data.List
import Text.Printf

import Data.IntMap qualified as IM
import Data.IntSet qualified as IS
import Data.Map qualified as M
import Data.Set qualified as S
import Data.Tree qualified as T
import Data.Sequence qualified as Q
import Data.Vector qualified as V

import Debug.Trace qualified as Debug

debug :: Bool
debug = () /= ()

base :: Int
base = 10^(9::Int) + 7

factCacheSize :: Int
factCacheSize = 4 * 10 ^! 6

type I = Int
type O = Int

type Dom   = ()
type Codom = ()

type Solver = Dom -> Codom

solve :: Solver
solve = \ case
    () -> ()

decode :: [[I]] -> Dom
decode = \ case
    _:_ -> ()
    _   -> invalid $ "toDom: " ++ show @Int __LINE__

encode :: Codom -> [[O]]
encode = \ case
    _rr -> [[]]

main :: IO ()
main = B.interact (detokenize . encode . solve . decode . entokenize)

class AsToken a where
    readB :: B.ByteString -> a
    readBs :: B.ByteString -> [a]
    readBs = map readB . B.words
    entokenize :: B.ByteString -> [[a]]
    entokenize = map readBs . B.lines

    showB :: a -> B.ByteString
    showBs :: [a] -> B.ByteString
    showBs = B.unwords . map showB
    detokenize :: [[a]] -> B.ByteString
    detokenize = B.unlines . map showBs

instance AsToken B.ByteString where
    readB = id
    showB = id

instance AsToken Int where
    readB = readInt
    showB = showInt

instance AsToken Integer where
    readB = readInteger
    showB = showInteger

instance AsToken String where
    readB = readStr
    showB = showStr

instance AsToken Double where
    readB = readDbl
    showB = showDbl

instance AsToken Char where
    readB = B.head
    showB = B.singleton
    readBs = B.unpack
    showBs = B.pack

readInt :: B.ByteString -> Int
readInt = fst . fromJust . B.readInt

showInt :: Int -> B.ByteString
showInt = B.pack . show

readInteger :: B.ByteString -> Integer
readInteger = fst . fromJust . B.readInteger

showInteger :: Integer -> B.ByteString
showInteger = B.pack . show

readStr :: B.ByteString -> String
readStr = B.unpack

showStr :: String -> B.ByteString
showStr = B.pack

readDbl :: B.ByteString -> Double
readDbl = read . B.unpack

showDbl :: Double -> B.ByteString
showDbl = B.pack . show

class DeQueue q where
    emptyDQ :: q a
    nullDQ  :: q a -> Bool
    consDQ  :: a -> q a -> q a
    snocDQ  :: q a -> a -> q a
    dequeueL :: b -> (a -> q a -> b) -> q a -> b
    dequeueR :: b -> (q a -> a -> b) -> q a -> b

instance DeQueue Q.Seq where
    emptyDQ :: Q.Seq a
    emptyDQ = Q.empty
    nullDQ :: Q.Seq a -> Bool
    nullDQ  = Q.null
    consDQ :: a -> Q.Seq a -> Q.Seq a
    consDQ  = (Q.<|)
    snocDQ  :: Q.Seq a -> a -> Q.Seq a
    snocDQ  = (Q.|>)
    dequeueL :: b -> (a -> Q.Seq a -> b) -> Q.Seq a -> b
    dequeueL z f dq = case Q.viewl dq of
        Q.EmptyL  -> z
        a Q.:< aq -> f a aq
    dequeueR :: b -> (Q.Seq a -> a -> b) -> Q.Seq a -> b
    dequeueR z f dq = case Q.viewr dq of
        Q.EmptyR  -> z
        aq Q.:> a -> f aq a

{- Bonsai -}

{- debug -}
trace :: String -> a -> a
trace | debug     = Debug.trace
      | otherwise = const id

tracing :: Show a => a -> a
tracing = trace . show <*> id

{- error -}
impossible :: String -> a
impossible msg = error $ msg ++ ", impossible"

invalid :: String -> a
invalid msg = error $ msg ++ ", invalid input"

{- TreeCon -}
class Functor t => TreeCon t where
    branches :: t a -> [t a]

dfs :: TreeCon t => t a  -> [t a]
dfs t = t : concatMap dfs (branches t)

bfs :: TreeCon t => t a -> [t a]
bfs = concat . levels 

levels :: TreeCon t => t a -> [[t a]]
levels t = [t] : foldr (lgzw (++)) [] (map levels (branches t))

lgzw :: (a -> a -> a) -> [a] -> [a] -> [a]
lgzw f (x:xs) (y:ys) = f x y : lgzw f xs ys
lgzw _ xs [] = xs
lgzw _ [] ys = ys

depth :: TreeCon t => t a -> Int
depth = succ . foldl' max 0 . map depth . branches

paths :: TreeCon t => t a -> [[t a]]
paths = \ case
    t | null br   -> [[t]]
      | otherwise -> [ t:p | b <- br, p <- paths b ]
        where
            br = branches t

instance TreeCon T.Tree where
    branches :: T.Tree a -> [T.Tree a]
    branches t = t.subForest

{- list -}
{- |
>>> combinations 2 "abcd"
["ab","ac","ad","bc","bd","cd"]
-}
combinations :: Int -> [a] -> [[a]]
combinations = \ case
    0   -> const [[]]
    n+1 -> \ case 
        []   -> []
        x:xs -> map (x:) (combinations n xs) ++ combinations (n+1) xs
    _ -> error $ "combinations: " ++ show @Int __LINE__ ++ ", negative"

{- binominal coefficients -}
nCr :: Integral a => a -> a -> a
nCr n r
    | n < 0  || r < 0            = error $ "nCr: " ++ show @Int __LINE__ ++ ", negative "
    | n < r                      = 0
    | n == 0 || r == 0 || n == r = 1
    | otherwise                  = iter 1 n 1
    where
        r' = min r (n-r)
        iter p m = \ case
            q | q > r'    -> p
              | otherwise -> iter (p * m `div` q) (pred m) (succ q)

{- partial permutation -}
nPr :: Integral a => a -> a -> a
nPr n r = product (genericTake r [n, pred n .. 1])

{- |
>>> spanCount odd [3,1,4,1,5,9]
(2,[4,1,5,9])
-}
spanCount :: (a -> Bool) -> [a] -> (Int, [a])
spanCount p = \ case
    x:xs | p x -> case spanCount p xs of
        (m,ys)     -> (succ m, ys)
    xs         -> (0,xs)

{- Run Length Encode -}
type RLE a = [(a, Int)]

toRLE :: Eq a => [a] -> RLE a
toRLE = unfoldr psi where
    psi = \ case
        x:xs -> case spanCount (x ==) xs of
            (m,ys) -> Just ((x, succ m), ys)
        _    -> Nothing

fromRLE :: RLE a -> [a]
fromRLE = (uncurry (flip replicate) =<<)

rleSplitAt :: Int -> RLE a -> (RLE a, RLE a)
rleSplitAt = \ case
    n+1 -> \ case
        h@(x,m+1):rs
            | n < m     -> ([(x,n+1)],(x,m-n):rs)
            | otherwise -> case rleSplitAt (n-m) rs of
                (as,bs)     -> (h:as,bs)
        _               -> ([],[])
    _   -> ([],)

{- |
>>> runLength "aaaabbbcddeeeeeefghhhh"
[('a',4),('b',3),('c',1),('d',2),('e',6),('f',1),('g',1),('h',4)]
-}
runLength :: Eq a => [a] -> [(a, Int)]
runLength = toRLE

{- |
>>> splitEvery 3 [0 .. 10]
[[0,1,2],[3,4,5],[6,7,8],[9,10]]
-}
splitEvery :: Int -> [a] -> [[a]]
splitEvery k = \ case
    [] -> []
    xs -> case splitAt k xs of
        (ys,zs) -> ys : splitEvery k zs

{- |
>>> splice 5 "abcdefghij"
["abcde","bcdef","cdefg","defgh","efghi","fghij"]
-}
splice :: Int -> [a] -> [[a]]
splice n = (!! n) . transpose . map inits . tails

{- |
>>> subsegments "yay"
[["y","a","y"],["ya","ay"],["yay"]]
-}
subsegments :: [a] -> [[[a]]]
subsegments = drop 1 . transpose . map inits . transpose . tails 

{- |
>>> mex [8,23,9,0,12,11,1,10,13,7,41,4,14,21,5,17,3,19,2,6]
15
-}
mex     ::  [Int] -> Int
mex xs  =   minform 0 (length xs, xs)

minform         ::  Int -> (Int, [Int]) -> Int
minform a (n,xs)
  | n == 0      =   a
  | m == b - a  =   minform b (n-m, vs)
  | otherwise   =   minform a (m, us)
    where  (us,vs)  =  partition (< b) xs
           b        =  a + 1 + n `div` 2
           m        = length us

{- zipper -}
type Zp a = ([a],a,[a])

toZp :: [a] -> Zp a
toZp = \ case 
    x:xs -> ([],x,xs)
    _    -> error "toZp: empty list"

fromZp :: Zp a -> [a]
fromZp = \ case
    (as,c,bs) -> foldl (flip (:)) (c:bs) as

mvL :: Zp a -> Zp a
mvL = \ case
    (a:as,c,bs) -> (as,a,c:bs)
    _           -> error "mvL: already at left-most"

mvR :: Zp a -> Zp a
mvR = \ case
    (as,c,b:bs) -> (c:as,b,bs)
    _           -> error "mvR: already at right-most"

mvLwhile :: (a -> Bool) -> Zp a -> Zp a
mvLwhile p = \ case
    ascbs@([],_,_) -> ascbs
    ascbs@(_,c,_)
        | p c       -> mvLwhile p (mvL ascbs)
        | otherwise -> ascbs

mvRwhile :: (a -> Bool) -> Zp a -> Zp a
mvRwhile p = \ case
    ascbs@(_,_,[]) -> ascbs
    ascbs@(_,c,_)
        | p c       -> mvRwhile p (mvR ascbs)
        | otherwise -> ascbs

{- list-tuple transformations -}
toTuple :: [a] -> (a,a)
toTuple = \ case
    x:y:_ -> (x,y)
    _     -> error $ "toTuple: too short list"

fromTuple :: (a,a) -> [a]
fromTuple (x,y) = [x,y]

toTriple :: [a] -> (a,a,a)
toTriple = \ case
    (x:y:z:_) -> (x,y,z)
    _         -> error $ "toTriple: too short list"

fromTriple :: (a,a,a) -> [a]
fromTriple = \ case
    (x,y,z) -> [x,y,z]

{- counting -}
countif :: (a -> Bool) -> [a] -> Int
countif = iter 0
    where
        iter a p (x:xs) = iter (bool a (succ a) (p x)) p xs
        iter a _ []     = a

{- rotate matrix -}
rotCW :: [[a]] -> [[a]]
rotCW = transpose . reverse

rotCCW :: [[a]] -> [[a]]
rotCCW = reverse . transpose

rotPI :: [[a]] -> [[a]]
rotPI = reverse . map reverse

countWhile :: (a -> Bool) -> (a -> a) -> a -> Int
countWhile = iter 0 where
    iter c p f = \ case
        !x | p x       -> iter (succ c) p f (f x)
           | otherwise -> c

{- Union-Find -}
data UF
    = UF
    { parent :: IM.IntMap Int
    , size   :: IM.IntMap Int
    }

newUF :: Int -> Int -> UF
newUF s t
    = UF
    { parent = IM.fromList $ (,-1) <$> [s .. t]
    , size   = IM.fromList $ (,1)  <$> [s .. t]
    }

root :: UF -> Int -> Int
root uf = \ case
    x | p == -1   -> x
      | otherwise -> root uf p
      where
        p = uf.parent IM.! x

unite :: UF -> Int -> Int -> UF
unite uf x y = if
    | x' == y' -> uf
    | szx > szy -> update uf x' (y', szy)
    | otherwise -> update uf y' (x', szx)
    where
        x' = root uf x
        y' = root uf y
        szx = uf.size IM.! x'
        szy = uf.size IM.! y'
        update :: UF -> Int -> (Int, Int) -> UF
        update u a (b, szb)
            = u
            { parent = IM.insert b a u.parent
            , size   = IM.adjust (+ szb) a u.size
            }

isSame :: UF -> Int -> Int -> Bool
isSame uf x y = root uf x == root uf y

{- array -}
scanArray :: (Ix i, Enum i)
          => (a -> b)
          -> (b -> a -> b)
          -> (b -> b -> b -> a -> b)
          -> Array (i,i) a -> Array (i,i) b
scanArray f g h sa = ta where
    ta  = listArray (bounds sa) (phi <$> assocs sa)
    phi = \ case
        (ij@(i,j),a)
            | ij == ij0 -> f a
            | i  == i0  -> g (ta ! second pred ij) a
            | j  == j0  -> g (ta ! first  pred ij) a
            | otherwise -> h (ta ! (pred *** pred) ij) (ta ! first  pred ij) (ta ! second pred ij) a
            where
                ij0 = fst (bounds sa)
                i0  = fst ij0
                j0  = snd ij0

neighbors4 :: (Ix i, Enum i) => ((i,i),(i,i)) -> (i,i) -> [(i,i)]
neighbors4 (ij0@(i0,j0),hw@(h,w)) = \ case
    ij@(i,j) 
        | ij == ij0    -> [                second succ ij,                first succ ij]
        | ij == (i0,w) -> [second pred ij,                                first succ ij]
        | ij == hw     -> [second pred ij,                 first pred ij               ]
        | ij == (h,j0) -> [                second succ ij, first pred ij               ]
        | i  == i0     -> [second pred ij, second succ ij,                first succ ij]
        | j  == j0     -> [                second succ ij, first pred ij, first succ ij]
        | i  == h      -> [second pred ij, second succ ij, first pred ij               ]
        | j  == w      -> [second pred ij,                 first pred ij, first succ ij]
        | otherwise    -> [second pred ij, second succ ij, first pred ij, first succ ij]

neighbors4Array :: (Ix i, Enum i) => (a -> Bool, Array (i,i) a) -> Array (i,i) (S.Set (i,i))
neighbors4Array (p,a) = listArray (bounds a) (S.fromList . filter (p . (a !)) . neighbors4 (bounds a) <$> range (bounds a))

bfs4Array :: (Ix i, Enum i, Ord i)
          => Array (i,i) (S.Set (i,i)) -> (i,i) -> [S.Set (i,i)]
bfs4Array a ij = unfoldr psi (S.empty, S.singleton ij) where
    psi = \ case
        (vs,ns)
            | S.null ns' -> Nothing
            | otherwise  -> Just (ns, (vs',ns'))
            where
                ns' = S.difference (S.unions $ S.map (a !) ns) vs
                vs' = S.union vs ns

{- Cartesian Product -}
cp :: [[a]] -> [[a]]
cp = \ case
    []     -> [[]]
    xs:xss -> [ x : ys | x <- xs, ys <- yss ]
        where
            yss = cp xss

{- integer arithmetic -}
isqrt :: Integral a => a -> a
isqrt = fromInteger . sqrtI . toInteger

infixr 8 ^!

(^!) :: Num a => a -> Int -> a
(^!) x n = x^n

averageI :: Integer -> Integer -> Integer
averageI m n = (m + n) `div` 2

sqrtI :: Integer -> Integer
sqrtI = \ case
    m@(_n+2)      -> until (good m) (improve m) 1
    m | m < 0     -> error "sqrtI: negative"
      | otherwise -> m
    where 
        good x g = g ^! 2 <= x && x < succ g ^! 2
        improve x g = averageI g (x `div` g)

{- modular arithmetic -}
modulus :: Int
modulus = base

euclidEx :: Int -> Int -> (Int,Int,Int)
euclidEx = f 1 0 0 1 where
    f s t s' t' a = \ case
        0 -> (a, s, t)
        b -> f s' t' (s - q * s') (t - q * t') b r
            where 
                (q, r) = divMod a b

mrecip :: Int -> Int
mrecip a = case euclidEx a modulus of
    (1, s, _)  -> s `mod` modulus
    (-1, s, _) -> -s `mod` modulus
    _          -> invalid $ show @Int __LINE__

minv :: Mod -> Mod
minv (Mod m) = Mod (mrecip m)

mnCr :: Int -> Int -> Mod
mnCr n r = a * minv b where
    a = mfact n
    b = mfact r * mfact (n - r)

mfact :: Int -> Mod
mfact = (mfactab !) 

mfactab :: Array Int Mod
mfactab = listArray (0,factCacheSize) $ scanl' (*) (1 :: Mod) 
        $ Mod <$> take factCacheSize [(1 :: Int) ..]

newtype Mod = Mod Int
    deriving (Eq, Show, Read)

instance Num Mod where
    Mod m + Mod n = Mod (m `madd` n)
    Mod m * Mod n = Mod (m `mmul` n)
    negate (Mod m) = Mod (m `mmul` negate 1)
    fromInteger n = Mod (fromInteger (n `mod` fromIntegral @Int modulus))
    abs = undefined
    signum = undefined

toMod :: Int -> Mod
toMod m = Mod (m `mod` modulus)

fromMod :: Mod -> Int
fromMod (Mod m) = m

madd :: Int -> Int -> Int
madd !m !n = (m + n) `mod` modulus

msub :: Int -> Int -> Int
msub !m = madd m . negate

mmul :: Int -> Int -> Int
mmul !m !n = m * n `mod` modulus

mexpt :: Int -> Int -> Int
mexpt !b = \ case
    0             -> 1
    o | odd o     -> mmul b (mexpt b (pred o))
      | otherwise -> mexpt (mmul b b) (o `div` 2)

{- prime numbers -}
factors :: Int -> IS.IntSet
factors n = iter IS.empty (isqrt n) where
    iter s = \ case
        0 -> s
        d -> case divMod n d of
            (q,0) -> iter (IS.insert d (IS.insert q s)) (pred d)
            _     -> iter s (pred d)

primeFactors :: Int -> [Int]
primeFactors n = unfoldr f (n,2)
    where
        f = \ case
            (1,_) -> Nothing
            (m,p) | m < p^!2  -> Just (m,(1,m))
                  | otherwise -> case divMod m p of
                (q,0) -> Just (p,(q,p))
                _ | p == 2    -> f (m,3)
                  | otherwise -> f (m,p+2)

primesLT1000 :: [Int]
primesLT1000
    = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97
      ,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199
      ,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293
      ,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397
      ,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499
      ,503,509,521,523,541,547,557,563,569,571,577,587,593,599
      ,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691
      ,701,709,719,727,733,739,743,751,757,761,769,773,787,797
      ,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887
      ,907,911,919,929,937,941,947,953,967,971,977,983,991,997]

primesLT1000000 :: () -> [Int]
primesLT1000000 () = takeWhile (1000000 >) primes

primes :: [Int]
primes = small ++ large
    where
        (p,candidates) = case roll (mkWheel small) of
            _:x:xs -> (x,xs)
            _      -> impossible $ "primes: at "++ show @Int __LINE__
        small          = [2,3,5,7]
        large          = p : filter isPrime candidates
        isPrime n      = all (not . divides n) 
                       $ takeWhile (\ pr -> pr * pr <= n) large
        divides n pr   = n `mod` pr == 0

data Wheel = Wheel Int [Int]

roll :: Wheel -> [Int]
roll (Wheel n rs) = [ n * k + r | k <- [0 ..], r <- rs ]

nextSize :: Wheel -> Int -> Wheel
nextSize (Wheel n rs) p
    = Wheel (p * n) [ r2 | k <- [0 .. pred p], r <- rs
                         , let r2 = n*k+r, r2 `mod` p /= 0 ]

mkWheel :: [Int] -> Wheel
mkWheel = foldl' nextSize w0 where
    w0 = Wheel 1 [1]

{- bits -}
bitPat :: Bits a => a -> Int -> [Bool]
bitPat a w = map (testBit a) $ reverse [0 .. pred w]

selectPat :: [Bool] -> [a] -> [a]
selectPat = \ case
    True:bs -> \ case
        y:ys    -> y : selectPat bs ys
        _       -> []
    _:bs    -> \ case
        _:ys    -> selectPat bs ys
        _       -> []
    _       -> const []

{- Dummy -}
_Comparing :: Ord a => (b -> a) -> b -> b -> Ordering
_Comparing = comparing
_LiftA :: Applicative f => (a -> b) -> f a -> f b
_LiftA = liftA
_Join :: Monad m => m (m a) -> m a
_Join = join
_Printf :: PrintfType r => String -> r
_Printf = printf

_DigitToInt :: Char -> Int
_DigitToInt = digitToInt
_On :: (b -> b -> c) -> (a -> b) -> a -> a -> c
_On = on
_ISempty :: IS.IntSet
_ISempty = IS.empty
_Mempty :: Ord a => M.Map a b
_Mempty = M.empty
_Tflatten :: T.Tree a -> [a]
_Tflatten = T.flatten
_Vlength :: V.Vector a -> Int
_Vlength = V.length
