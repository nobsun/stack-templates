{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.0.0
github:              {{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}
license:             BSD3
author:              {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer:          {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright:           {{copyright}}{{^copyright}}{{year}}{{^year}}2023{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}

extra-source-files:
- README.md
- ChangeLog.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            {{category}}{{^category}}Web{{/category}}

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme>

dependencies:
- base >= 4.7 && < 5
- unicode-show
- bytestring
- utf8-string
- time
- hspec
- main-tester
- doctest
- aeson
- gloss
- array
- containers
- prettyprinter
- mtl
- free
- recursion-schemes
- vector
- directory
- filepath
- split

language: GHC2021

default-extensions:
- ImplicitParams
- ImportQualifiedPost
- LambdaCase
- LexicalNegation
- MultiWayIf
- NPlusKPatterns
- OverloadedStrings
- DataKinds
- PolyKinds
- NoStarIsType
- TypeFamilyDependencies
- UndecidableInstances

ghc-options:
- -Wall
- -Wno-unticked-promoted-constructors
- -Wno-unused-imports
- -Wno-unused-top-binds
- -Wno-orphans

library:
  source-dirs: src

executables:
  {{name}}:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
    - -rtsopts
    dependencies:
    - {{name}}

tests:
  {{name}}-test:
    main:                spec.hs
    source-dirs:         test
    dependencies:
    - {{name}}
    - hspec
    - main-tester

  {{name}}-doctest:
    main:                doctests.hs
    source-dirs:         test
    dependencies:
    - {{name}}
    - doctest

{-# START_FILE catn #-}
#!/bin/bash
cat -n $1

{-# START_FILE start_programming #-}
#!/bin/bash

if [ $(pgrep "script") ]; then
  exit 0
else
  script -a -f -c bash programming_session.log
fi

{-# START_FILE lghci #-}
#!/bin/bash

if [ ! $(pgrep "script") ]; then
  echo 'start_programming を起動してから lghci を起動してください'
  exit 1
fi

stack exec -- ghci $1

{-# START_FILE prompt.bash #-}
GIT_PS1_SHOWDIRTYSTATE=true
PS1='\[\033[32m\]\u@\h\[\033[00m\]:\[\033[34m\]\w\[\033[31m\]$(__git_ps1)\[\033[00m\]\n\$ '

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE src/Lib.hs #-}
-- # Lib 雛形モジュール
-- このファイルは`stack new`コマンドで自動的に`src/`に挿入されます
-- 
-- ## 言語拡張と`module`宣言
-- 最低限の指定をしてある
{-# LANGUAGE GHC2021 #-}
{-# LANGUAGE ImplicitParams #-}
{-# LANGUAGE ImportQualifiedPost #-}
{-# LANGUAGE LexicalNegation #-}
{-# LANGUAGE LambdaCase, MultiWayIf #-}
{-# LANGUAGE NPlusKPatterns #-}
{-# LANGUAGE DataKinds, PolyKinds, NoStarIsType, TypeFamilyDependencies #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE OverloadedRecordDot, NoFieldSelectors, DuplicateRecordFields #-}
module Lib
    ( someFunc
    ) where

-- ## `doctest`のための記述と定義本体

{- | 
「なんか関数」を標準出力に印字する
>>> someFunc
なんか関数
-}
someFunc :: IO ()
someFunc = putStrLn "なんか関数"

{-# START_FILE test/spec.hs #-}
{-# OPTIONS -F -pgmF hspec-discover #-}

{-# START_FILE test/LibSpec.hs #-}
{-# LANGUAGE GHC2021 #-}
{-# LANGUAGE ImplicitParams #-}
{-# LANGUAGE ImportQualifiedPost #-}
{-# LANGUAGE LexicalNegation #-}
{-# LANGUAGE LambdaCase, MultiWayIf #-}
{-# LANGUAGE NPlusKPatterns #-}
{-# LANGUAGE DataKinds, PolyKinds, NoStarIsType, TypeFamilyDependencies #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE OverloadedRecordDot, NoFieldSelectors, DuplicateRecordFields #-}
module LibSpec
  ( spec
  ) where

import Data.String
import qualified Codec.Binary.UTF8.String as U
import qualified Data.ByteString as B
import Test.Main
import Test.Hspec
import Text.Show.Unicode
import Lib

newtype UString a = UString a deriving Eq

ustring :: B.ByteString -> UString String
ustring = UString . U.decode . B.unpack

instance IsString a => IsString (UString a) where
  fromString = UString . fromString
  
instance Show a => Show (UString a) where
  show (UString s) = ushow s

spec :: Spec
spec = describe "someFunc" $ do
  { it "「なんか関数」を標準出力に印字する." $ do
    { result <- captureProcessResult Lib.someFunc
    ; prExitCode result `shouldBe` ExitSuccess
    ; prStderr result `shouldSatisfy` B.null
    ; ustring (prStdout result) `shouldBe` "なんか関数\n"
    }
  }

{-# START_FILE test/doctests.hs #-}
{-# LANGUAGE GHC2021 #-}
{-# LANGUAGE ImplicitParams #-}
{-# LANGUAGE ImportQualifiedPost #-}
{-# LANGUAGE LexicalNegation #-}
{-# LANGUAGE LambdaCase, MultiWayIf #-}
{-# LANGUAGE NPlusKPatterns #-}
{-# LANGUAGE DataKinds, PolyKinds, NoStarIsType, TypeFamilyDependencies #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE OverloadedRecordDot, NoFieldSelectors, DuplicateRecordFields #-}
module Main where

import Test.DocTest

main :: IO ()
main = doctest ["src/Lib.hs"]

{-# START_FILE app/Main.hs #-}
{-# LANGUAGE GHC2021 #-}
{-# LANGUAGE ImplicitParams #-}
{-# LANGUAGE ImportQualifiedPost #-}
{-# LANGUAGE LexicalNegation #-}
{-# LANGUAGE LambdaCase, MultiWayIf #-}
{-# LANGUAGE NPlusKPatterns #-}
{-# LANGUAGE DataKinds, PolyKinds, NoStarIsType, TypeFamilyDependencies #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE OverloadedRecordDot, NoFieldSelectors, DuplicateRecordFields #-}
module Main where

import System.Environment

main :: IO ()
main = do
    { prog <- getProgName
    ; args <- getArgs
    ; envs <- getEnvironment
    ; putStrLn ("Program name: " ++ prog)
    ; putStr $ unlines $ "Arguments: " : args
    ; putStr $ unlines $ "Environments: " : map show envs
    }


{-# START_FILE README.md #-}
# {{name}}

{-# START_FILE LICENSE #-}
Copyright {{copyright}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

{-# START_FILE setting #-}
#!/bin/bash

entr $1
echo "export CURRENT_STACK_EXE_ENTRY=$1" > .curname

stack build {{name}}:exe:$1
gen-hie > hie.yaml

{-# START_FILE building #-}
#!/bin/bash

source .curname
stack build {{name}}:exe:$CURRENT_STACK_EXE_ENTRY

{-# START_FILE executing #-}
#!/bin/bash

source .curname
stack exec -- $CURRENT_STACK_EXE_ENTRY

{-# START_FILE ghcing #-}
#!/bin/bash

source .curname
stack exec -- ghci app/$CURRENT_STACK_EXE_ENTRY/Main.hs

{-# START_FILE .gitignore #-}
.stack-work/
dist-new/
{{name}}.cabal
*.log
.curproj
.curname
!programming_session.log
core
*.hi
*.o
*~

{-# START_FILE .ghci #-}
import Data.Time
_prompt _ n = (utcToLocalTime <$> getCurrentTimeZone <*> getCurrentTime) >>= print >> return ">>> "
:set prompt-function _prompt
import Text.Show.Unicode
:set -interactive-print=uprint
:set -XGHC2021 -XLambdaCase -XMultiWayIf -XNPlusKPatterns -XOverloadedStrings -XLexicalNegation
:set -XDataKinds -XPolyKinds -XNoStarIsType -XTypeFamilyDependencies -XUndecidableInstances
:set -XImplicitParams -XNoFieldSelectors -XDuplicateRecordFields -XOverloadedRecordDot
:set editor catn
import Text.Printf
:def! l (\ s -> readFile s >>= sequence . (zipWith (printf "%4d    %s\n") [(1::Int)..]) . lines >> return (unwords ["::l", s]))
:def! r (\ _ -> return "::e")

{-# START_FILE doc/tex/Makefile #-}
NAME	= document
STYL    = slide
VIEWER  = qpdfview

all	: $(NAME).pdf

ifeq ($(STYL),slide)
# %.pdf	: %.md
# 	pandoc -f markdown -t beamer -V theme:Singapore -H slide.tex -o $@ --pdf-engine=lualatex $<
%.pdf	: %.md
	pandoc -f markdown -t beamer -V theme:Madrid -H slide.tex -o $@ --pdf-engine=lualatex $<
else
%.pdf	: Makefile %.tex
	platex $(NAME)
	dvipdfmx $(NAME)
	cp $@ $(NAME)`date +%Y%m%d`.pdf
endif

clean	:
	-rm *~ *.nav *.out *.snm *.dvi *.aux *.log *.bib *.bbl *.blg *.toc *.ptb

preview	: $(NAME).pdf
	$(VIEWER) $< &

{-# START_FILE doc/tex/slide.tex #-}
usepackage{luatexja}
\hypersetup{unicode=true}
\usepackage{fancyvrb}
\DefineVerbatimEnvironment{code}{Verbatim}{}
\setmonofont{Inconsolata}
\setsansfont{Migu1C}

{-# START_FILE doc/markdown/marp-header.yaml #-}
---
marp: true
style: |
  section {
    font-family: 'Migu 1C';
  }
  p br {
    display: none;
  }
  code, pre {
    font-family: 'HackGen Console NF';
  }
  li {
    font-size: 90%;
  }
  table {
    font-size: 15px;
  }
  div.mermaid {
    all: unset;
  }
theme: default
paginate: true
math: katex
---

{-# START_FILE doc/markdown/mermaid.html #-}
<div class="mermaid>
</div>

<script type="module">
import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10.0.0/dist/mermaid.esm.min.mjs';
mermaid.initialize({ startOnLoad: true });
window.addEventListener('vscode.markdown.updateContent', function() { mermaid.init() });
</script>

{-# START_FILE ChangeLog.md #-}
# Changelog for {{name}}

## Unreleased changes
